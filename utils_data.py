'''this module contains functions for data preprocessing'''
import pickle
from datetime import datetime

from sklearn.model_selection import train_test_split  # for splitting the data into train and test samples
from sklearn.preprocessing import MinMaxScaler  # for feature scaling
from sklearn.preprocessing import OrdinalEncoder  # to encode categorical variables
import matplotlib.pyplot as plt
from pandas_profiling import ProfileReport


def plot_results(trials):
    f, ax = plt.subplots(1)  # , figsize=(10,10))
    xs = [t['misc']['vals']['n_neighbors'] for t in trials.trials]
    ys = [-t['result']['loss'] for t in trials.trials]
    ax.scatter(xs, ys, s=20, linewidth=0.01, alpha=0.5)
    ax.set_title(' merged_fingerprints - KNN', fontsize=18)
    ax.set_xlabel('n_neighbors', fontsize=12)
    ax.set_ylabel('cross validation accuracy', fontsize=12)
    print('saving plot...')
    plt.savefig('training_loss_n_neigh.png')


# test function that evaluates the model on the test data and return the score
def test(model, test_data, test_label):
    # Make a prediction using the optimized model
    prediction = model.predict( test_data )
    # Report the accuracy of the classifier on a given set of data
    score = model.score( test_data, test_label )
    return score


def transform(df):
    # Do Min-Max scaling
    scaler = MinMaxScaler()
    df['coord_x'] = scaler.fit_transform(df[['coord_x']])
    df['coord_y'] = scaler.fit_transform(df[['coord_y']])
    enc = OrdinalEncoder()  # select the encoder
    df['building'] = enc.fit_transform(df[['building']])  # encode categorical values
    df['floor'] = enc.fit_transform(df[['floor']])
    df['tile'] = enc.fit_transform(df[['tile']])
    df = df.dropna()
    return df


# save function save the model
def save(model):
    # Save the model
    print('Saving model...')
    # timestamp datetime
    date = datetime.now()
    ts = date.timestamp()
    ts = str(ts).split('.')[0]
    name_model_f = 'model_'+str(ts)
    with open(name_model_f+'.pkl', 'wb') as f:
        pickle.dump(model, f)
    f.close()
    return name_model_f


# load function load the model
def load(model_path):
    # Load the model
    print('Loading model from {}...'.format(model_path))
    with open(model_path, 'rb') as f:
        model = pickle.load(f)
    return model


def preprocess(df):

    df = df[['fingerprint_id','coord_x','coord_y','building','floor','tile']]
    # min-max scaling and ordinal encoding data
    df = transform(df)
    # split
    df_train, df_test = train_test_split(df, test_size=0.2, random_state=42)
    return df_train, df_test


# funtion create_repoort use pandas-profiling to create report on final_tab and save it as html7
def create_report(df):
    report = ProfileReport(df, title='Your Autogenerated Prediction Report', html={'style':{'full_width':True}})
    report.to_file("report.html")

